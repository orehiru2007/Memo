rafter.ddo.jp CentOS release 7.2 (Oracle VirtualBox)

Postfix 3 系 (コンパイルインストール)

1. 既存 Postfix の削除
   
   # yum remove postfix

2. 必要パッケージのインストール

   # yum install -y kernel-devel gcc
   # yum install -y cyrus-sasl-devel libdb-devel mysql-devel openldap-devel openssl-devel \
   > pcre-devel pkgconfig rpm-libs systemd-units zlib-devel libicu-devel postgresql-devel mysql++-devel.x86_64

3. 実行ユーザ、グループの確認

   # cat /etc/group | egrep "(^postfix|^postdrop)"
   postdrop:x:90:
   postfix:x:89:

   # cat /etc/group | egrep ^postfix
   postfix:x:89:

4. インストール

   # cat postfix-3.1.1-sleep.patch
   --- postfix-3.1.1.orig/src/smtpd/smtpd_check.c  2016-02-16 02:06:11.000000000 +0900
   +++ postfix-3.1.1/src/smtpd/smtpd_check.c       2016-05-18 14:39:13.375713869 +0900
   @@ -208,6 +208,7 @@
    #include <valid_utf8_hostname.h>
    #include <midna_domain.h>
    #include <mynetworks.h>
   +#include <iostuff.h>
   
    /* DNS library. */
   
   @@ -4065,6 +4066,7 @@
        ARGV   *list;
        int     found;
        int     saved_recursion = state->recursion++;
   +        VSTRING *buf;
   
        if (msg_verbose)
           msg_info(">>> START %s RESTRICTIONS <<<", reply_class);
   @@ -4153,8 +4155,35 @@
               if (cpp[1] == 0 || alldig(cpp[1]) == 0) {
                   msg_warn("restriction %s must be followed by number", SLEEP);
                   reject_server_error(state);
   -           } else
   -               sleep(atoi(*++cpp));
   +            } else {
   +                      /* sleep(atoi(*++cpp)); */
   +                      int sleep_time = atoi(*++cpp);
   +                      int i;
   +                      for ( i = 0; i < sleep_time; i++ ) {
   +                             /* sleep( 1 ); */
   +                            if ( ! read_wait(state->client->fd, 1) ) { /* read enabled */
   +                              int ch = VSTREAM_GETC(state->client);
   +                               if (vstream_feof(state->client) || vstream_ferror(state->client)) { /* lost connection */
   +                                    vstream_ungetc(state->client, ch);
   +                                    buf = vstring_alloc(100);
   +                                    vstring_sprintf(buf, "lost connection after %d sec", i);
   +                                    log_whatsup(state, "sleep", STR(buf));
   +                                    vstring_free(buf);
   +                                    status = SMTPD_CHECK_REJECT; /* finish immediately if lost connection */
   +                                    break;
   +                              }
   +                              else { /* pipelining */
   +                                    vstream_ungetc(state->client, ch);
   +                                    buf = vstring_alloc(100);
   +                                    vstring_sprintf(buf, "pipelining after %d sec", i);
   +                                    log_whatsup(state, "sleep", STR(buf));
   +                                    vstring_free(buf);
   +                                    sleep( sleep_time - i );
   +                                    break;
   +                              }
   +                            }
   +                      }
   +                    }
           } else if (strcasecmp(name, REJECT_PLAINTEXT_SESSION) == 0) {
               status = reject_plaintext_session(state);
           }

   # wget http://mirror.postfix.jp/postfix-release/official/postfix-3.1.1.tar.gz
   # tar zxvf postfix-3.1.1.tar.gz
   # cd postfix-3.1.1
   # patch -p1 <../postfix-3.1.1-sleep.patch
   # make -f Makefile.init makefiles shared=yes dynamicmaps=yes shlib_directory=/usr/lib/postfix \
   > CCARGS='-fPIC \
   > -DHAS_LDAP \
   > -DHAS_PCRE \
   > -DHAS_MYSQL \
   > -DUSE_SASL_AUTH \
   > -DUSE_CYRUS_SASL \
   > -DDEF_SERVER_SASL_TYPE=\"dovecot\" \
   > -DUSE_TLS \
   > -I/usr/include -I/usr/include/mysql -I/usr/include/sasl' \
   > AUXLIBS="-L/usr/lib64 -L/lib64 -lldap -lpcre -llber -lssl -lcrypto -lsasl2 -Wl,-z,now -Wl,-z,relro,-z,noexecstack" \
   > AUXLIBS_MYSQL="-L/usr/lib64/mysql/ -lmysqlclient -lz -lm"
   # make

   # make install
   install_root: [/]
   tempdir: [/usr/local/src/postfix/3.0.3/postfix-3.0.3]
   config_directory: [/etc/postfix]
   command_directory: [/usr/sbin]
   daemon_directory: [/usr/libexec/postfix]
   data_directory: [/var/lib/postfix]
   html_directory: [no]
   mail_owner: [postfix]
   mailq_path: [/usr/bin/mailq]
   manpage_directory: [/usr/local/man]
   newaliases_path: [/usr/bin/newaliases]
   queue_directory: [/var/spool/postfix]
   readme_directory: [no]
   sendmail_path: [/usr/sbin/sendmail]
   setgid_group: [postdrop]
   shlib_directory: [/usr/lib/postfix]
   meta_directory: [/etc/postfix]

6. サービス登録

   1. /usr/lib/systemd/system/postfix.service
   [Unit]
   Description=Postfix Mail Transport Agent
   After=syslog.target network.target
   Conflicts=sendmail.service exim.service
   
   [Service]
   Type=forking
   PIDFile=/var/spool/postfix/pid/master.pid
   EnvironmentFile=-/etc/sysconfig/network
   ExecStartPre=-/usr/libexec/postfix/aliasesdb
   ExecStartPre=-/usr/libexec/postfix/chroot-update
   ExecStart=/usr/sbin/postfix start
   ExecReload=/usr/sbin/postfix reload
   ExecStop=/usr/sbin/postfix stop
   
   [Install]
   WantedBy=multi-user.target

   2. 登録
   # systemctl enable postfix

SPF

1. SPF チェック用モジュール インストール / 設定	

   1. perl-Mail-SPF-Query インストール
   # yum install -y perl-Mail-SPF-Query perl-Mail-SPF perl-NetAddr-IP

   2. SPF チェック用モジュールのダウンロード / 配置
   # wget https://launchpad.net/debian/+archive/primary/+files/postfix-policyd-spf-perl_2.010.orig.tar.gz
   # tar zxvf postfix-policyd-spf-perl_2.010.orig.tar.gz
   # cp ./postfix-policyd-spf-perl-2.010/postfix-policyd-spf-perl /usr/local/lib/policyd-spf-perl

   3. /etc/postfix/master.cf (追記箇所のみ)
   # diff -U1 /etc/postfix/master.cf{.orig,}
   --- /etc/postfix/master.cf.orig 2014-03-28 20:20:44.011980632 +0900
   +++ /etc/postfix/master.cf      2014-03-28 20:21:07.434715174 +0900
   @@ -127 +127,2 @@
    #  ${nexthop} ${user}
   +policy-spf unix  -       n       n       -       0       spawn user=nobody argv=/usr/bin/perl /usr/local/lib/policyd-spf-perl

   4. /etc/postfix/main.cf (重要箇所のみ　)
   policy-spf_time_limit = 3600s
   smtpd_client_restrictions =
           permit_sasl_authenticated,
           permit_mynetworks,
           reject_rbl_client sbl-xbl.spamhaus.org,
           check_policy_service unix:private/policy-spf,
           check_client_access hash:/etc/postfix/smtpd_client_restrictions,
           permit

S25R + Postgrey

1. 必要パッケージのインストール

   # yum install -y perl-CPAN.noarch perl-BerkeleyDB perl-IO-stringy perl-IO-Compress perl-Net-DNS perl-Net-Server perl-Parse-Syslog perl-IO-Multiplex
   ※CentSO 7 では、Parse::Syslog が RPM で提供されていない様子、Parse::Syslog  は RHEL6 用を流用

2. src.rpm のインストール

   # su - masuda
   $ mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
   $ echo '%_topdir %{getenv:HOME}/rpmbuild' > ~/.rpmmacrosexit
   $ cd ~/rpmbuild/SRPMS/
   $ wget https://dl.fedoraproject.org/pub/epel/7/SRPMS/Packages/p/postgrey-1.34-12.el7.src.rpm
   $ rpm -Uvh postgrey-1.34-12.el7.src.rpm

3. tarpit 用パッチの適用

   $ cd ../SOURCES/
   $ tar zxvf postgrey-1.34.tar.gz 
   $ cd postgrey-1.34
   $ wget http://k2net.hakuba.jp/pub/targrey-0.31-postgrey-1.34.patch
   $ patch -p0 < targrey-0.31-postgrey-1.34.patch 
   $ cd ..
   $ rm -rf postgrey-1.34.tar.gz 
   $ tar czvf postgrey-1.34.tar.gz postgrey-1.34

4. rpmbuild

   $ rpmbuild -bb ~/rpmbuild/SPECS/postgrey.spec
   $ exit

5. インストール

   # rpm -Uvh --nodeps /home/masuda/rpmbuild/RPMS/noarch/postgrey-1.34-1.el7.centos.noarch.rpm
   # systemctl enable postgrey
   # systemctl start postgrey

6. /etc/sysconfig/postgrey

   POSTGREY_OPTS="--inet=127.0.0.1:60000 --tarpit=125 --targrey --retry-count=3 --delay=3600 --max-age=30"

7. 設定ファイル配置

   # wget http://k2net.hakuba.jp/spam/postfix.conf.2.tar.gz
   # tar zxvf postfix.conf.2.tar.gz
   # cp postfix.conf.2/* /etc/postfix/

8. TIPS

   1. /etc/postfix/master.cf

      submission inet n       -       n       -       -       smtpd
        -o syslog_name=postfix/submission                                  : syslog レコードのプロセス名の前に付けられるメールシステムの名前 / submission
        -o smtpd_tls_security_level=encrypt                                : SMTP TLS セキュリティレベル / encrypt (TLS 暗号化強制)
        -o smtpd_sasl_auth_enable=yes                                      : SASL 認証 / yes (有効)
        -o smtpd_reject_unlisted_recipient=yes                             : 不明な送信先アドレスへの配送拒否 / yes (拒否する)
      #  -o smtpd_client_restrictions=$mua_client_restrictions             : 詳細不明
      #  -o smtpd_helo_restrictions=$mua_helo_restrictions                 : 詳細不明
      #  -o smtpd_sender_restrictions=$mua_sender_restrictions             : 詳細不明
        -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject   : RCPT TO コマンドに適用されるアクセス制限 / permit_sasl_authenticated,reject
      #  -o milter_macro_daemon_name=ORIGINATING                           : 詳細不明 (Postfix 2.3 から Milter が利用可能のため、その関連)
      smtps     inet  n       -       n       -       -       smtpd
        -o syslog_name=postfix/smtps                                       : syslog レコードのプロセス名の前に付けられるメールシステムの名前 / smtps
        -o smtpd_tls_wrappermode=yes                                       : サーバが常に TLS を使う、非標準 "ラッパー" モードの指定 / yes (有効)
        -o smtpd_sasl_auth_enable=yes                                      : SASL 認証 / yes (有効)
        -o smtpd_reject_unlisted_recipient=yes                             : 不明な送信先アドレスへの配送拒否 / yes (拒否する)
      #  -o smtpd_client_restrictions=$mua_client_restrictions             : 詳細不明
      #  -o smtpd_helo_restrictions=$mua_helo_restrictions                 : 詳細不明
      #  -o smtpd_sender_restrictions=$mua_sender_restrictions             : 詳細不明
        -o smtpd_recipient_restrictions=permit_sasl_authenticated,reject   : RCPT TO コマンドに適用されるアクセス制限 / permit_sasl_authenticated,reject
      # -o milter_macro_daemon_name=ORIGINATING                            : 詳細不明 (Postfix 2.3 から Milter が利用可能のため、その関連)

   2. Postfix リソースチューニング

      パラメータ名                        | デフォルト値                 | チューニング後 | 補足
      ------------------------------------+------------------------------+----------------+----------------------------------------------
      anvil_rate_time_unit                | 60s                          | 60s            | 単位時間
      smtpd_recipient_limit               | 1000                         | 1000           | 配送処理毎の 送信先アドレスの最大
      smtpd_timeout                       | ${stress?10}${stress:300}s   | 300s           | SMTP クライアントからの要求を受け取るまでの 待機時間
      smtpd_client_connection_count_limit | 50                           | 50             | 単一の SMTP クライアントからの 同時最大接続数
      smtpd_client_message_rate_limit     | 0                            | 120            | 単位時間における  単一の SMTP クライアントからの配送要求数の最大
      smtpd_client_recipient_rate_limit   | 0                            |                | 単位時間における  単一の SMTP クライアントからの送信先アドレスの最大
      smtpd_client_connection_rate_limit  | 0                            |                | 単位時間における  単一の SMTP クライアントからの接続試行回数の最大
      smtpd_client_event_limit_exceptions | $mynetworks                  | $mynetworks    | 接続カウントや接続速度、SMTP 要求速度の制限から除外されるクライアント

   3. stress パラメータについて

      Postfix 2.5 以降でサポートされた、過負荷に対する機能
      プロセス数の上限 (default_process_limit) に達した場合に、各パラメータの値を変更することが可能

      # ps -ef | grep smtpd | grep -v grep
      postfix   8689  8683  0 19:37 ?        00:00:00 smtpd -n smtp -t inet -u -o stress=
      postfix   8698  8683  0 19:37 ?        00:00:00 smtpd -n smtp -t inet -u -o stress=
      postfix   8711  8683  0 19:37 ?        00:00:00 smtpd -n smtp -t inet -u -o stress=yes       ← 上限値に達した場合 "yes" が付与される

      パラメータ名                        | デフォルト値                 | 補足
      ------------------------------------+------------------------------+------------------------------------------------
      address_verify_poll_count           | ${stress?1}${stress:3}       | 送信先アドレス検証 verify に問い合わせる回数
      postscreen_command_time_limit       | ${stress?10}${stress:300}s   | postscreen 機能利用時に SMTP クライアントからの要求を受け取るまでの 待機時間
      postscreen_greet_wait               | ${stress?2}${stress:6}s      | postscreen 機能利用時に Greeting Mesaage を出すまで時間
      smtpd_hard_error_limit              | ${stress?1}${stress:20}      | SMTP クライアントのエラー (メール配送失敗に至らないもの) 数の最大
      smtpd_junk_command_limit            | ${stress?1}${stress:100}     | SMTP クライアントが実行できるジャンクコマンド (NOOP、VRFY、ETRN、RET 等) 数の最大
      smtpd_per_record_deadline           | ${stress?yes}${stress:no}    | yes の場合、各処理が途中であっても smtpd_timeout の値を超えた場合、接続を切断する
      smtpd_starttls_timeout              | ${stress?10}${stress:300}s   | SMTP クライアントからの要求を受け取るまでの 待機時間 (STARTTLS 以降)
      smtpd_timeout                       | ${stress?10}${stress:300}s   | SMTP クライアントからの要求を受け取るまでの 待機時間

   4. Postscreen

      Postfix 2.8 以降でサポートされた簡単な Tarpitting 機能
      S25R + taRgrey を使うので、覚える必要はないが、Postfix 自体の進化は評価できるかも
     
      1. /etc/postfix/main.cf (抜粋)

         ## Postscreen
         postscreen_access_list = permit_mynetworks,
                                  hash:/etc/postfix/postscreen_access
         postscreen_blacklist_action= drop
         postscreen_greet_action = enforce
         postscreen_greet_wait = ${stress?2}${stress:31}s
         #postscreen_dnsbl_sites = all.rbl.jp=127.0.0.[2;4],
         #                        zen.spamhaus.org=127.0.0.[2..7;10;11]
         #postscreen_dnsbl_action = enforce

      2. /etc/postfix/postscreen_access

         #
         127.0.0.1               permit
         #
         192.168.1.0/24          reject

      3. /etc/postfix/master.cf (抜粋)

         ## Postscreen
         #smtp      inet  n       -       n       -       -       smtpd
         smtp      inet  n       -       n       -     1     postscreen
         smtpd     pass  -       -       n       -     -     smtpd
         dnsblog   unix  -       -       n       -     0     dnsblog
         tlsproxy  unix  -       -       n       -     0     tlsproxy

   5. インスタンスを複数起動

      参考 URL (過去のやり方) : Stray Penguin http://www.asahi-net.or.jp/~aa4t-nngk/postfix-tips.html

      1. 初期化
        
        # postmulti -e init

         /etc/postfix/main.cf に以下の行が追加される
         multi_instance_wrapper = ${command_directory}/postmulti -p --
         multi_instance_enable = yes

      2. mta グループに属する postfix-deux という名前のインスタンスを作成する

         # postmulti -I postfix-deux -G mta -e create
         
         /etc/postfix/main.cf に以下の行が追加される
         multi_instance_directories = /etc/postfix-deux

      3. /etc/postfix-deux/main.cf 重要箇所のみ抜粋

         ## Dovecot LDA
         mailbox_command = /usr/libexec/dovecot/dovecot-lda
         #dovecot_destination_concurrency_limit = 1
         
         ## Alias
         alias_database = hash:/etc/postfix-deux/aliases
         alias_maps = hash:/etc/postfix-deux/aliases
         
         ## Postfix-Multi
         #master_service_disable = inet
         master_service_disable =
         authorized_submit_users =
         multi_instance_group = mta
         multi_instance_name = postfix-deux
         syslog_facility = local5
         multi_instance_enable = yes
 
      4. /etc/postfix-deux/master.cf 重要箇所のみ抜粋
 
         #smtp      inet  n       -       n       -       -       smtpd
         10025      inet  n       -       n       -       -       smtpd
 
      5. インスタンス Postfix-deux の起動
 
         # postmulti -i postfix-deux -e enable
         # postmulti -i postfix-deux -p start
 
      6. コマンド 例
 
         newaliases : postmulti -i postfix-deux -x newaliases
         postmap    : postmulti -i postfix-deux -x postmap
         mailq      : postmulti -i postfix-deux -x mailq

      7. /etc/rsyslog.conf 重要箇所のみ抜粋

         mail.*                                                 -/var/log/maillog
         &~
         local5.*                                               -/var/log/maillog_deux
         &~

      8. /etc/logrotate.d/syslog 重要箇所のみ抜粋

         /var/log/maillog
         /var/log/maillog_deux
         /var/log/messages
         {
             daily
             rotate 180
             sharedscripts
             postrotate
                 /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true
             endscript
         }

   6. サーバサイド 暗号制御

      パラメータ名                        | 値                           | 補足
      ------------------------------------+------------------------------+-----------------------------------------------------------------------------------------
      smtpd_enforce_tls                   | no                           | クライアントに対する STARTTLS を通知し、利用を強制する (no = 強制しない)
      smtpd_tls_loglevel                  | 2                            | ログレベル 0 TLS 動作に関するログ記録を無効にします
                                          |                              |            1 TLS ハンドシェイクと証明書の情報をログに記録します
                                          |                              |            2 TLS ネゴシエーションの間のレベルをログに記録します
                                          |                              |            3 TLS ネゴシエーションプロセスの 16進数および ASCII ダンプを ログに記録します
                                          |                              |            4 STARTTLS 以降の通信の 16進数および ASCII ダンプを完全に ログに記録します
      smtpd_tls_protocols                 | TLSv1, !SSLv2, !SSLv3        | 危殆化の進んでいる SSLv2， SSLv3 は利用を禁止する
      smtpd_tls_exclude_ciphers           | aNULL, MD5, DES, MEDIUM, LOW | 全ての STARTTLS 処理において、除外する暗号スイート
      smtpd_tls_mandatory_ciphers         | high                         | STARTTLS を強制された場合に、利用する最低限の 暗号スイート
      smtpd_tls_mandatory_exclude_ciphers | aNULL, MD5, DES, MEDIUM, LOW | STARTTLS を強制された場合に、除外する暗号スイート

      以下、デフォルト値
      tls_export_cipherlist               | aNULL:-aNULL:ALL:+RC4:@STRENGTH
      tls_high_cipherlist                 | aNULL:-aNULL:ALL:!EXPORT:!LOW:!MEDIUM:+RC4:@STRENGTH
      tls_low_cipherlist                  | aNULL:-aNULL:ALL:!EXPORT:+RC4:@STRENGTH
      tls_medium_cipherlist               | aNULL:-aNULL:ALL:!EXPORT:!LOW:+RC4:@STRENGTH
      tls_null_cipherlist                 | eNULL:!aNULL

5. 参考 URL

   http://www.postfix-jp.info/trans-2.3/jhtml/OVERVIEW.html



