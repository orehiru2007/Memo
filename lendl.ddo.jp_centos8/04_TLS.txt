lendl.ddo.jp CentOS release 8.0 (1905) / Oracle VirtualBox

TLS サーバ証明書 SHA-2 署名

1. プライベート CA (Certificate Authority : 認証局) 用設定ファイルの作成

   # mkdir -p /etc/pki/myCA
   # cp -p /etc/pki/tls/openssl.cnf /etc/pki/myCA/ca.cnf

   # cat /etc/pki/myCA/ca.cnf
   [ ca ]
   default_ca      = CA_default            # The default ca section
   
   [ CA_default ]
   dir             = /etc/pki/myCA         # Where everything is kept
   certs           = $dir/certs            # Where the issued certs are kept
   crl_dir         = $dir/crl              # Where the issued crl are kept
   database        = $dir/index.txt        # database index file.
   new_certs_dir   = $dir/newcerts         # default place for new certs.
   certificate     = $dir/cacert.pem       # The CA certificate
   serial          = $dir/serial           # The current serial number
   crlnumber       = $dir/crlnumber        # the current crl number
   crl             = $dir/crl.pem          # The current CRL
   private_key     = $dir/private/cakey.pem# The private key
   RANDFILE        = $dir/private/.rand    # private random number file
   x509_extensions = usr_cert              # The extentions to add to the cert
   email_in_dn     = off
   
   name_opt        = ca_default            # Subject Name options
   cert_opt        = ca_default            # Certificate field options
   
   default_days    = 3650                  # how long to certify for
   default_crl_days= 30                    # how long before next CRL
   default_md      = sha256                # which md to use.
   preserve        = no                    # keep passed DN ordering
   
   policy          = policy_match
   
   [ policy_match ]
   countryName             = supplied
   stateOrProvinceName     = supplied
   organizationName        = supplied
   organizationalUnitName  = optional
   commonName              = supplied
   emailAddress            = optional
   
   ####################################################################
   [ req ]
   default_bits            = 2048
   default_md              = sha256
   default_keyfile         = privkey.pem
   distinguished_name      = req_distinguished_name
   attributes              = req_attributes
   x509_extensions = v3_ca # The extentions to add to the self signed cert
   
   string_mask = nombstr
   
   #req_extensions = v3_req # The extensions to add to a certificate request
   
   [ req_distinguished_name ]
   countryName                     = Country Name (2 letter code)
   countryName_default             = JP
   countryName_min                 = 2
   countryName_max                 = 2
   
   stateOrProvinceName             = State or Province Name (full name)
   stateOrProvinceName_default     = Gifu
   
   localityName                    = Locality Name (eg, city)
   localityName_default            = Ogaki
   
   0.organizationName              = Organization Name (eg, company)
   0.organizationName_default      = Kono
   
   organizationalUnitName          = Organizational Unit Name (eg, section)
   organizationalUnitName_default  = PrivateCA
   
   commonName                      = Common Name (eg, your name or your server\'s host
   commonName_max                  = 64
   
   emailAddress                    = Email Address
   emailAddress_max                = 64
   
   [ req_attributes ]
   challengePassword               = A challenge password
   challengePassword_min           = 4
   challengePassword_max           = 20
   
   unstructuredName                = An optional company name
   
   [ usr_cert ]
   # Make CA
   # basicConstraints=CA:true
   # nsCertType = sslCA, emailCA
   # keyUsage = cRLSign, keyCertSign
   
   # Make Server Cert
   # basicConstraints=CA:FALSE
   # nsCertType = server
   
   # Make Client Cert
   basicConstraints=CA:FALSE
   nsCertType = client, email, objsign
   
   subjectKeyIdentifier=hash
   authorityKeyIdentifier=keyid,issuer
   
   [ v3_req ]
   basicConstraints = CA:FALSE
   keyUsage = nonRepudiation, digitalSignature, keyEncipherment
   
   [ v3_ca ]
   subjectKeyIdentifier=hash
   authorityKeyIdentifier=keyid:always,issuer:always
   basicConstraints = CA:true
   keyUsage = cRLSign, keyCertSign
   nsCertType = sslCA, emailCA
   
   [ crl_ext ]
   authorityKeyIdentifier=keyid:always,issuer:always

2. プライベート CA を構築するためのスクリプトの作成

   # cp -p /usr/local/src/openssl/openssl-1.0.2t/apps/CA.sh /etc/pki/myCA/CA.sh

   [root@lendl ~]# diff -u /etc/pki/myCA/CA.sh{.orig,}
   --- /etc/pki/myCA/CA.sh.orig    2019-10-01 16:28:35.772628925 +0900
   +++ /etc/pki/myCA/CA.sh 2019-10-01 16:29:50.673600230 +0900
   @@ -62,6 +62,9 @@
   
    if [ -z "$DAYS" ] ; then DAYS="-days 365" ; fi # 1 year
    CADAYS="-days 1095"    # 3 years
   +DAYS="-days 3650"      # 10 year
   +CADAYS="-days 3650"    # 3 years
   +SSLEAY_CONFIG="-config /etc/pki/myCA/ca.cnf"
    REQ="$OPENSSL req $SSLEAY_CONFIG"
    CA="$OPENSSL ca $SSLEAY_CONFIG"
    VERIFY="$OPENSSL verify"
   @@ -69,6 +72,7 @@
    PKCS12="openssl pkcs12"
   
    if [ -z "$CATOP" ] ; then CATOP=./demoCA ; fi
   +CATOP=/etc/pki/myCA
    CAKEY=./cakey.pem
    CAREQ=./careq.pem
    CACERT=./cacert.pem

3. プライベート CA の作成

   # /etc/pki/myCA/CA.sh -newca
   (snip)
   Certificate Details:
           Serial Number:
               66:ba:2f:f0:a1:c3:3b:eb:87:f0:99:21:55:d5:05:c8:1c:cc:e8:78
           Validity
               Not Before: Oct  1 07:47:58 2019 GMT
               Not After : Sep 28 07:47:58 2029 GMT
           Subject:
               countryName               = JP
               stateOrProvinceName       = Gifu
               organizationName          = Kono
               organizationalUnitName    = PrivateCA
               commonName                = lendl.ddo.jp
           X509v3 extensions:
               X509v3 Subject Key Identifier:
                   98:A0:1F:7C:46:3F:A9:6B:53:EE:EF:CC:34:73:64:5C:F4:A6:CF:15
               X509v3 Authority Key Identifier:
                   keyid:98:A0:1F:7C:46:3F:A9:6B:53:EE:EF:CC:34:73:64:5C:F4:A6:CF:15
                   DirName:/C=JP/ST=Gifu/O=TAK/OU=PrivateCA/CN=lendl.ddo.jp
                   serial:66:BA:2F:F0:A1:C3:3B:EB:87:F0:99:21:55:D5:05:C8:1C:CC:E8:78
   
               X509v3 Basic Constraints:
                   CA:TRUE
               X509v3 Key Usage:
                   Certificate Sign, CRL Sign
               Netscape Cert Type:
                   SSL CA, S/MIME CA
   Certificate is to be certified until Sep 28 07:47:58 2029 GMT (3650 days)
   
   Write out database with 1 new entries
   Data Base Updated

   [root@lendl myCA]# ls -al /etc/pki/myCA/
   合計 44
   drwxr-xr-x   6 root root  215 10月  1 16:47 .
   drwxr-xr-x. 13 root root  164 10月  1 16:42 ..
   -rwxr-xr-x   1 root root 5298 10月  1 16:29 CA.sh
   -rw-r--r--   1 root root 5175 10月  1 16:28 CA.sh.orig
   -rw-r--r--   1 root root 3718 10月  1 16:46 ca.cnf
   -rw-r--r--   1 root root 4878 10月  1 16:47 cacert.pem
   -rw-r--r--   1 root root 1001 10月  1 16:47 careq.pem
   drwxr-xr-x   2 root root    6 10月  1 16:47 certs
   drwxr-xr-x   2 root root    6 10月  1 16:47 crl
   -rw-r--r--   1 root root  115 10月  1 16:47 index.txt
   -rw-r--r--   1 root root   21 10月  1 16:47 index.txt.attr
   -rw-r--r--   1 root root    0 10月  1 16:47 index.txt.old
   drwxr-xr-x   2 root root   58 10月  1 16:47 newcerts
   drwxr-xr-x   2 root root   23 10月  1 16:47 private
   -rw-r--r--   1 root root   41 10月  1 16:47 serial

4. サーバ用 SSL 証明書の作成

   1. /etc/pki/myCA/ca.cnf

      [ usr_cert ]
      # Make CA
      # basicConstraints=CA:true
      # nsCertType = sslCA, emailCA
      # keyUsage = cRLSign, keyCertSign
      
      # Make Server Cert
      basicConstraints=CA:FALSE
      nsCertType = server
      
      # Make Client Cert
      # basicConstraints=CA:FALSE
      # nsCertType = client, email, objsign
   
   2. 秘密鍵の生育

      # mkdir -p /etc/pki/Server/private
      # cd /etc/pki/Server/private

      # openssl genrsa -out server.key -des3 2048
      Generating RSA private key, 2048 bit long modulus
      ....................+++
      ....+++
      e is 65537 (0x10001)
      Enter pass phrase for server.key:                   ※ サーバ秘密鍵のパスフレーズを入力
      Verifying - Enter pass phrase for server.key:       ※ 再入力

      # chmod 400 server.key

   3. 秘密鍵のパスワード解除

      このままだと httpd 起動時にパスワードを訊かれるため、パスワードをはずす。
 
      ※ 生育時に "-des3 2048" のオプションをつけないて実行しても、パスワード無しの秘密鍵を発行することができる。

      # mv server.key server.key.orig
      # openssl rsa -in server.key.orig -out server.key
      Enter pass phrase for server.key.orig:              ※ サーバ秘密鍵のパスフレーズを入力
      writing RSA key
   
   4. CSR (Certificate Signing Request : 証明書署名要求) の作成

      # mkdir /etc/pki/Server/certs
      # cd /etc/pki/Server/certs

      # openssl req -new -key /etc/pki/Server/private/server.key -out server.csr
      (snip)
      Country Name (2 letter code) [XX]:JP
      State or Province Name (full name) []:Gifu
      Locality Name (eg, city) [Default City]:Ogaki
      Organization Name (eg, company) [Default Company Ltd]:Kono
      Organizational Unit Name (eg, section) []:PrivateServer
      Common Name (eg, your name or your server's hostname) []:lendl.ddo.jp
      (snip)

5. 証明書の発行 (プライベート CA での署名)

   # cd /etc/pki/Server/certs
   # openssl ca -config /etc/pki/myCA/ca.cnf -in server.csr -out server.crt
   Using configuration from /etc/pki/myCA/ca.cnf
   Enter pass phrase for /etc/pki/myCA/private/cakey.pem:
   Check that the request matches the signature
   Signature ok
   Certificate Details:
           Serial Number:
               0c:41:ac:b5:14:9a:02:77:9f:73:30:5b:1b:12:6b:77:84:52:b7:e4
           Validity
               Not Before: Oct  1 08:21:13 2019 GMT
               Not After : Sep 28 08:21:13 2029 GMT
           Subject:
               countryName               = JP
               stateOrProvinceName       = Gifu
               organizationName          = Kono
               organizationalUnitName    = PrivateServer
               commonName                = lendl.ddo.jp
           X509v3 extensions:
               X509v3 Basic Constraints:
                   CA:FALSE
               Netscape Cert Type:
                   SSL Server
               X509v3 Subject Key Identifier:
                   B2:A2:C0:91:3A:D9:BD:36:61:35:AF:C2:68:DD:9D:1E:D7:E5:32:D8
               X509v3 Authority Key Identifier:
                   keyid:35:AF:0C:96:DB:EF:03:2F:E4:29:78:91:38:FF:A7:90:73:92:28:7F
   
   Certificate is to be certified until Sep 28 08:21:13 2029 GMT (3650 days)
   Sign the certificate? [y/n]:y
   
   
   1 out of 1 certificate requests certified, commit? [y/n]y
   Write out database with 1 new entries
   Data Base Updated
   
   
   確認 (Signature Algorithm: が、sha256WithRSAEncryption であることを確認すること)
   # openssl x509 -text -in server.crt

6. PEM (Privacy Enhanced Mail 形式の証明書) の作成

   # mkdir /etc/pki/Server/pem
   # cd /etc/pki/Server/pem
   # cat /etc/pki/Server/certs/server.crt /etc/pki/Server/private/server.key > server.pem

7. クライアント用 SSL 証明書の作成

   1. /etc/pki/myCA/ca.cnf の編集

      [ usr_cert ]
      # Make CA
      # basicConstraints=CA:true
      # nsCertType = sslCA, emailCA
      # keyUsage = cRLSign, keyCertSign
      
      # Make Server Cert
      # basicConstraints=CA:FALSE
      # nsCertType = server
      
      # Make Client Cert
      basicConstraints=CA:FALSE
      nsCertType = client, email, objsign
   
   2. 秘密鍵の生育

      # mkdir -p /etc/pki/Client/private
      # cd /etc/pki/Client/private
      # openssl genrsa -out client.key 2048
      
   3. CSR (Certificate Signing Request : 証明書署名要求) の作成

      # mkdir /etc/pki/Client/certs
      # cd /etc/pki/Client/certs

      # openssl req -new -days 3650 -key /etc/pki/Client/private/client.key -out client.csr
      (snip)
      Country Name (2 letter code) [XX]:JP
      State or Province Name (full name) []:Gifu
      Locality Name (eg, city) [Default City]:Ogaki
      Organization Name (eg, company) [Default Company Ltd]:Kono
      Organizational Unit Name (eg, section) []:PrivateClient
      Common Name (eg, your name or your server's hostname) []:Client1
      (snip)

   4. 証明書の発行 (プライベート CA での署名)

      # cd /etc/pki/Client/certs

      # openssl ca -config /etc/pki/myCA/ca.cnf -in client.csr -out client.crt
      Using configuration from /etc/pki/myCA/ca.cnf
      Enter pass phrase for /etc/pki/myCA/private/cakey.pem:
      Check that the request matches the signature
      Signature ok
      Certificate Details:
              Serial Number:
                  0c:41:ac:b5:14:9a:02:77:9f:73:30:5b:1b:12:6b:77:84:52:b7:e5
              Validity
                  Not Before: Oct  1 08:24:45 2019 GMT
                  Not After : Sep 28 08:24:45 2029 GMT
              Subject:
                  countryName               = JP
                  stateOrProvinceName       = Gifu
                  organizationName          = Kono
                  organizationalUnitName    = PrivateClient
                  commonName                = Client1
              X509v3 extensions:
                  X509v3 Basic Constraints:
                      CA:FALSE
                  Netscape Cert Type:
                      SSL Client, S/MIME, Object Signing
                  X509v3 Subject Key Identifier:
                      E7:DC:B5:47:63:38:8A:E2:25:77:F7:44:E3:9E:E4:51:65:E2:76:3F
                  X509v3 Authority Key Identifier:
                      keyid:35:AF:0C:96:DB:EF:03:2F:E4:29:78:91:38:FF:A7:90:73:92:28:7F
      
      Certificate is to be certified until Sep 28 08:24:45 2029 GMT (3650 days)
      Sign the certificate? [y/n]:y
      
      
      1 out of 1 certificate requests certified, commit? [y/n]y
      Write out database with 1 new entries
      Data Base Updated

   5. Windows クライアント配布形式 (PKCS#12 : Public-Key Cryptography Standards) へ変換

      # cd /etc/pki/Client/certs
      # openssl pkcs12 -export -in /etc/pki/Client/certs/client.crt -inkey /etc/pki/Client/private/client.key -out client.p12
      Enter Export Password:                                       # インポート用パスフレーズ
      Verifying - Enter Export Password:                           # インポート用パスフレーズ
      
   6. Windows クライアント配布用のプライベート CA 証明書の作成

      # cd /etc/pki/Client/certs
      # openssl x509 -inform pem -in /etc/pki/myCA/cacert.pem -outform der -out cacert.der

   7. Windows クライアントに以下を配布します

      cacert.der
      client.p12



