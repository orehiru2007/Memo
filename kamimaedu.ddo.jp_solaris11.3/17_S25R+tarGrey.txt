kamimaedu.ddo.jp (VMware + Oracle Solaris 11.1 x86)

Postfix + S25R + tarGrey

1. Postgrey

   1. Perl モジュールの確認
   # perl -MCPAN -e shell
   cpan> i Net::Server
   cpan> i IO::Multiplex
   cpan> i BerkeleyDB

   以下のモジュールもインストールする
   MIME::Base64
   DB_File
   Net::SMTP
   Mail::SPF
   Mail::SPF::Query
   IP::Country:Fast
   Net::Ident
   IO::Socket::INET6
   IO::Socket::SSL
   Compress::Zlib
   Time::HiRes
   Mail::DKIM
   Mail::DomainKeys
   DBI
   BDB
   Encode::Detect
   Apache::Test
   HTML::Parser
   LWP::UserAgent
   HTTP::Date
   Encode::Detect
   Parse::Syslog
   Net::Server::Multiplex

   2. postgrey のインストール
   # groupadd -g 10023 postgrey
   # useradd -u 10023 -d /var/spool/postfix/postgrey -s /bin/false postgrey
   # wget http://postgrey.schweikert.ch/pub/postgrey-1.36.tar.gz
   # wget http://k2net.hakuba.jp/pub/targrey-0.31-postgrey-1.34.patch
   # tar zxvf postgrey-1.34.tar.gz
   # cd postgrey-1.34
   # gpatch -p0 < ../targrey-0.31-postgrey-1.34.patch
   # cp postgrey /usr/local/bin/
   # mkdir /var/spool/postfix/postgrey
   # chown postgrey:postgrey /var/spool/postfix/postgrey
   # cp postgrey_whitelist_clients /usr/local/64/etc/postfix/
   # cp postgrey_whitelist_recipients /usr/local/64/etc/postfix/

   # wget http://k2net.hakuba.jp/spam/postfix.conf.2.tar.gz
   # tar zxvf postfix.conf.2.tar.gz
   # cp postfix.conf.2/whitelist_client /usr/local/64/etc/postfix/
   # cp postfix.conf.2/whitelist_recipient /usr/local/64/etc/postfix/
   # cp postfix.conf.2/permit_client_nots25r /usr/local/64/etc/postfix/
   # postmap hash:/usr/local/64/etc/postfix/whitelist_client
   # postmap hash:/usr/local/64/etc/postfix/whitelist_recipient

   3. 起動スクリプトの作成
   # cat /etc/init.d/postgrey
   #!/bin/sh
   
   PID=`/usr/bin/ps -aef | /usr/bin/awk '{print $1" "$2}' | /usr/bin/grep postgrey | /usr/bin/awk '{print $2}'`
   
   case "$1" in
   'start')
           if [ $PID ]; then
                   echo "Postgrey has Started"
           else
                   /usr/local/bin/postgrey -d --dbdir=/var/spool/postfix/postgrey \
                   --inet=127.0.0.1:60000 --tarpit=125 --targrey --retry-count=2 \
                   --delay=300 --max-age=7
                   echo "Start Postgrey"
           fi
           ;;
   
   'stop')
           if [ $PID ]; then
                   kill -TERM $PID
                   echo "Stop Postgrey"
           else
                   echo "Postgrey has Stopped"
           fi
           ;;
   
   'restart')
           $0 stop
           sleep 5
           $0 start
           ;;
   
   *)
           echo "Usage: $0 { start | stop | restart }"
           exit 1
           ;;
   esac
   exit 0

   # chmod 755 /etc/init.d/postgrey
   # ln -s /etc/init.d/postgrey /etc/rc0.d/K36postgrey
   # ln -s /etc/init.d/postgrey /etc/rc1.d/K36postgrey
   # ln -s /etc/init.d/postgrey /etc/rcS.d/K36postgrey
   # ln -s /etc/init.d/postgrey /etc/rc2.d/S88postgrey

2. Postfix の設定

   # ln -s /usr/local/64/etc/postfix /etc/postfix

   # cat /etc/postfix/main.cf (spam 対策に重要な部分のみ抜粋)
   disable_vrfy_command = yes
   smtpd_client_restrictions =
           permit_sasl_authenticated,
           permit_mynetworks,
           check_client_access hash:/etc/postfix/smtpd_client_restrictions_access,
           permit
   smtpd_helo_required = yes
   smtpd_helo_restrictions =
           permit_sasl_authenticated,
           permit_mynetworks,
           check_client_access hash:/etc/postfix/smtpd_helo_restrictions_access,
           reject_invalid_hostname,
           # reject_non_fqdn_hostname,
           # reject_rbl_client all.rbl.jp,
           permit
   smtpd_sender_restrictions =
           permit_sasl_authenticated,
           permit_mynetworks,
           check_sender_access hash:/etc/postfix/smtpd_sender_restrictions_access,
           reject_non_fqdn_sender,
           reject_unknown_sender_domain,
           permit
   smtpd_recipient_restrictions =
           permit_sasl_authenticated,
           permit_mynetworks,
           reject_unauth_destination,
           reject_unknown_recipient_domain,
           # reject_unverified_recipient,
           check_recipient_access hash:/etc/postfix/whitelist_recipient,
           check_client_access hash:/etc/postfix/whitelist_client,
           check_client_access regexp:/etc/postfix/permit_client_nots25r,
           check_policy_service inet:60000,
           permit
   smtpd_data_restrictions=
           permit_sasl_authenticated,
           permit_mynetworks,
           check_recipient_access hash:/etc/postfix/whitelist_recipient,
           check_client_access hash:/etc/postfix/whitelist_client,
           check_client_access regexp:/etc/postfix/permit_client_nots25r,
           check_policy_service inet:60000,
           permit
   unknown_local_recipient_reject_code = 550
   unknown_address_reject_code = 550
   unverified_recipient_reject_code = 550
   mailbox_size_limit = 512000000
   message_size_limit = 512000000
   alias_database = hash:/etc/postfix/aliases
   alias_maps = hash:/etc/postfix/aliases
   default_process_limit = 200
   smtpd_recipient_limit = 100
   smtp_destination_recipient_limit = 50


    パラメータ                                                             | 説明
   ------------------------------------------------------------------------+---------------------------------
    smtpd_recipient_restrictions =                                         | RCPT TO コマンドの場面で適用する、アクセス制限
            permit_sasl_authenticated,                                     |    SMTP-Auth にて認証されている場合 許可
            permit_mynetworks,                                             |    自身のネットワークからの接続の場合 許可
            reject_unauth_destination,                                     |    転送許可するアドレス、仮想アドレスにマッチしない場合 拒否
            reject_unknown_recipient_domain,                               |    RCPT TO アドレスに DNS A または MX レコードがなく、アドレスが自身宛でない場合 拒否
            # reject_unverified_recipient,                                 |    # 内部メールサーバにアドレスの存在確認を行い、ない場合 拒否
            check_recipient_access hash:/etc/postfix/whitelist_recipient,  |    送信先アドレスの WhiteList のデータベースの検索し、対応する動作を実行する
            check_client_access hash:/etc/postfix/whitelist_client,        |    接続元アドレスの WhiteList のデータベースの検索し、対応する動作を実行する
            check_client_access regexp:/etc/postfix/permit_client_nots25r, |    S25R のデータベースの検索し、対応する動作を実行する
            check_policy_service inet:60000,                               |    S25R のデータベースを検査し、動作 WARN となったものを tarGrey に渡す
            permit                                                         |    許可 (クリーンナップルール)
    smtpd_data_restrictions=                                               | SMTP DATA コマンドの場面で適用する、アクセス制限
            permit_sasl_authenticated,                                     |    SMTP-Auth にて認証されている場合 許可
            permit_mynetworks,                                             |    自身のネットワークからの接続の場合 許可
            check_recipient_access hash:/etc/postfix/whitelist_recipient,  |    送信先アドレスの WhiteList のデータベースの検索し、対応する動作を実行する
            check_client_access hash:/etc/postfix/whitelist_client,        |    接続元アドレスの WhiteList のデータベースの検索し、対応する動作を実行する
            check_client_access regexp:/etc/postfix/permit_client_nots25r, |    S25R のデータベースの検索し、対応する動作を実行する
            check_policy_service inet:60000,                               |    S25R のデータベースを検査し、動作 WARN となったものを tarGrey に渡す
            permit                                                         |    許可 (クリーンナップルール)

   1. taRgrey の起動オプション

      OPTIONS="--dbdir=$DBPATH --inet=127.0.0.1:60000 --tarpit=125 --targrey --delay=300 --retry-count=2 --max-age=30"

      --tarpit         : 遅延待機時間の要求 125秒
      --targrey        : targrey モード
      --delay=300      : グレイリストの保持期間 300秒間は保持し、300秒後に規定に再送回数を満たせば自動ホワイトリストに追加する
      --retry-count=2  : グレイリストの保持期間 300秒間を経過した後、要求する再送回数 2回
      --max-age=30     : 自動ホワイトリストの保持期間 30日
 
   2. taRgrey の利用するデータベース (/var/spool/postfix/postgrey 配下)

      postgrey_clients.db : 自動ホワイトリスト
      tarpit_clients.db   : tarpitting グレイリスト
      postgrey.db         : 送信状況を管理

   3. taRgrey の仕組み

      smtpd_recipient_restrictions での一度目の check_policy_service で tarpitting を仕掛け、一旦、tarpit_clients.db (tarpitting グレイリスト) に登録される
      tarpitting を抜けた接続は smtpd_data_restrictions まで渡ってくるため、再度 check_policy_service で呼び出し、tarpitting のグレイリストから該当の IP を削除する

      tarpitting を抜けれなかった接続は tarpit_clients.db (tarpitting ブラックリスト) に登録されたままとなり、次回 接続時には smtpd_recipient_restrictions で greylisting の処理に回る

   4. 自動 Whitelist (postgrey_clients.db) の仕組み

      # db_dump -p postgrey.db
      VERSION=3
      format=print
      type=btree
      db_pagesize=4096
      HEADER=END
       192.168.1.0/root@kamimaedu.ddo.jp/tak@ibidensangyo.co.jp  ※1
       1359620946,1359621979,2,91                                ※2
      DATA=END

      ※1 送信元メールサーバ IP アドレス / 送信元アドレス / 送信先アドレス
      ※2 再送に受信した時間 (UNIX time) / 最後に受信した時間 (UNIX time) / リトライ回数 / 送信元メールサーバ IP アドレスの第四オクテット

      再送に受信した時間 (UNIX time) が 最後に受信した時間 (UNIX time) 300秒以上経過していること、かつ リトライ回数が 2回以上であれば
      postgrey_clients.db (自動ホワイトリスト) へ登録を行う ※30日を経過した場合 削除される


