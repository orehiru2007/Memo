kamimaedu.ddo.jp (VMware + Oracle Solaris 11.3 x86)

Chrome58 対応 (SAN を登録する)

TLS サーバ証明書 SHA-2 署名

1. プライベート CA (Certificate Authority : 認証局) 用設定ファイルの作成

   # mkdir -p /usr/local/etc/pki/myCA
   # cp -p /usr/local/64/etc/ssl/openssl.cnf /usr/local/etc/pki/myCA/ca.cnf

   # cat /usr/local/etc/pki/myCA/ca.cnf
   default_ca      = CA_default              # The default ca section
   
   [ CA_default ]
   dir             = /usr/local/etc/pki/myCA # Where everything is kept
   certs           = $dir/certs              # Where the issued certs are kept
   crl_dir         = $dir/crl                # Where the issued crl are kept
   database        = $dir/index.txt          # database index file.
   new_certs_dir   = $dir/newcerts           # default place for new certs.
   certificate     = $dir/cacert.pem         # The CA certificate
   serial          = $dir/serial             # The current serial number
   crlnumber       = $dir/crlnumber          # the current crl number
   crl             = $dir/crl.pem            # The current CRL
   private_key     = $dir/private/cakey.pem  # The private key
   RANDFILE        = $dir/private/.rand      # private random number file
   x509_extensions = usr_cert                # The extentions to add to the cert
   email_in_dn     = off
   
   name_opt        = ca_default              # Subject Name options
   cert_opt        = ca_default              # Certificate field options
   
   default_days    = 3650                    # how long to certify for
   default_crl_days= 30                      # how long before next CRL
   default_md      = sha256                    # which md to use.
   preserve        = no                      # keep passed DN ordering
   
   policy          = policy_match
   
   [ policy_match ]
   countryName             = supplied
   stateOrProvinceName     = supplied
   organizationName        = supplied
   organizationalUnitName  = optional
   commonName              = supplied
   emailAddress            = optional
   
   ####################################################################
   [ req ]
   default_bits            = 2048
   default_md              = sha256
   default_keyfile         = privkey.pem
   distinguished_name      = req_distinguished_name
   attributes              = req_attributes
   x509_extensions = v3_ca # The extentions to add to the self signed cert
   
   string_mask = nombstr
   
   req_extensions = v3_req # The extensions to add to a certificate request
   
   [ req_distinguished_name ]
   countryName                     = Country Name (2 letter code)
   countryName_default             = JP
   countryName_min                 = 2
   countryName_max                 = 2
   
   stateOrProvinceName             = State or Province Name (full name)
   stateOrProvinceName_default     = Gifu
   
   localityName                    = Locality Name (eg, city)
   localityName_default            = Ogaki
   
   0.organizationName              = Organization Name (eg, company)
   0.organizationName_default      = TAK
   
   organizationalUnitName          = Organizational Unit Name (eg, section)
   organizationalUnitName_default  = Private-CA
   
   commonName                      = Common Name (eg, your name or your server\'s host
   commonName_max                  = 64
   
   emailAddress                    = Email Address
   emailAddress_max                = 64
   
   [ req_attributes ]
   challengePassword               = A challenge password
   challengePassword_min           = 4
   challengePassword_max           = 20
   
   unstructuredName                = An optional company name
   
   [ usr_cert ]
   # Make CA
   #basicConstraints=CA:true
   #nsCertType = sslCA, emailCA
   #keyUsage = cRLSign, keyCertSign
   
   # Make Server Cert
   basicConstraints=CA:FALSE
   nsCertType = server
   
   # Make Client Cert
   #basicConstraints=CA:FALSE
   #nsCertType = client, email, objsign
   
   subjectKeyIdentifier=hash
   authorityKeyIdentifier=keyid,issuer
   subjectAltName = @alt_names
   
   [ v3_req ]
   basicConstraints = CA:FALSE
   keyUsage = nonRepudiation, digitalSignature, keyEncipherment
   subjectAltName = @alt_names
   
   [ v3_ca ]
   subjectKeyIdentifier=hash
   authorityKeyIdentifier=keyid:always,issuer:always
   basicConstraints = CA:true
   keyUsage = cRLSign, keyCertSign
   nsCertType = sslCA, emailCA
   
   [ crl_ext ]
   authorityKeyIdentifier=keyid:always,issuer:always
   
   [alt_names]
   DNS.1 = kamimaedu.ddo.jp
   DNS.2 = *.kamimaedu.ddo.jp


2. プライベート CA を構築するためのスクリプトの作成

   # cp -p /usr/local/etc/ssl/misc/CA.sh /usr/local/etc/pki/myCA/CA.sh

   # diff -u /usr/local/etc/pki/myCA/CA.sh{.orig,}
   --- /usr/local/etc/pki/myCA/CA.sh.orig  2016-04-13 17:54:33.138694473 +0900
   +++ /usr/local/etc/pki/myCA/CA.sh       2016-04-13 17:55:23.342435690 +0900
   @@ -61,6 +61,8 @@
    if [ -z "$OPENSSL" ]; then OPENSSL=openssl; fi
   
    if [ -z "$DAYS" ] ; then DAYS="-days 365" ; fi # 1 year
   +DAYS="-days 3650"   # 10 year
   +SSLEAY_CONFIG="-config /usr/local/etc/pki/myCA/ca.cnf"
    CADAYS="-days 1095"    # 3 years
    REQ="$OPENSSL req $SSLEAY_CONFIG"
    CA="$OPENSSL ca $SSLEAY_CONFIG"
   @@ -69,6 +71,7 @@
    PKCS12="openssl pkcs12"
   
    if [ -z "$CATOP" ] ; then CATOP=./demoCA ; fi
   +CATOP=/usr/local/etc/pki/myCA
    CAKEY=./cakey.pem
    CAREQ=./careq.pem
    CACERT=./cacert.pem

3. プライベート CA の作成

   # /usr/local/etc/pki/myCA/CA.sh -newca
   CA certificate filename (or enter to create)
   
   Making CA certificate ...
   Generating a 2048 bit RSA private key
   ...+++
   ...................+++
   writing new private key to '/usr/local/etc/pki/myCA/private/./cakey.pem'
   Enter PEM pass phrase:
   Verifying - Enter PEM pass phrase:
   -----
   You are about to be asked to enter information that will be incorporated
   into your certificate request.
   What you are about to enter is what is called a Distinguished Name or a DN.
   There are quite a few fields but you can leave some blank
   For some fields there will be a default value,
   If you enter '.', the field will be left blank.
   -----
   Country Name (2 letter code) [JP]:
   State or Province Name (full name) [Gifu]:
   Locality Name (eg, city) [Ogaki]:
   Organization Name (eg, company) [TAK]:
   Organizational Unit Name (eg, section) [Private-CA]:
   Common Name (eg, your name or your server's host []:kamimaedu.ddo.jp
   Email Address []:
   
   Please enter the following 'extra' attributes
   to be sent with your certificate request
   A challenge password []:
   An optional company name []:
   Using configuration from /usr/local/etc/pki/myCA/ca.cnf
   Enter pass phrase for /usr/local/etc/pki/myCA/private/./cakey.pem:
   Check that the request matches the signature
   Signature ok
   Certificate Details:
           Serial Number:
               02:d4:67:47:e5:14:72:c5:ae:6f:ee:46:60:63:cb:86:bb:b4:fb:f4
           Validity
               Not Before: Apr  8 02:53:08 2020 GMT
               Not After : Apr  8 02:53:08 2023 GMT
           Subject:
               countryName               = JP
               stateOrProvinceName       = Gifu
               organizationName          = TAK
               organizationalUnitName    = Private-CA
               commonName                = kamimaedu.ddo.jp
           X509v3 extensions:
               X509v3 Subject Key Identifier:
                   38:8E:A6:19:7C:3B:86:08:BA:0F:75:D0:E4:8D:D8:20:96:6B:8B:73
               X509v3 Authority Key Identifier:
                   keyid:38:8E:A6:19:7C:3B:86:08:BA:0F:75:D0:E4:8D:D8:20:96:6B:8B:73
                   DirName:/C=JP/ST=Gifu/O=TAK/OU=Private-CA/CN=kamimaedu.ddo.jp
                   serial:02:D4:67:47:E5:14:72:C5:AE:6F:EE:46:60:63:CB:86:BB:B4:FB:F4
   
               X509v3 Basic Constraints:
                   CA:TRUE
               X509v3 Key Usage:
                   Certificate Sign, CRL Sign
               Netscape Cert Type:
                   SSL CA, S/MIME CA
   Certificate is to be certified until Apr  8 02:53:08 2023 GMT (1095 days)
   
   Write out database with 1 new entries
   Data Base Updated

   以上で CA に必要なファイルが生育される。
   root@kamimaedu[120]/usr/local/etc/pki/myCA# ls -al /usr/local/etc/pki/myCA
   total 72
   drwxr-xr-x   6 root     root          15  4月  8日  11:53 ./
   drwxr-xr-x   5 root     root           5  4月 13日 2016年 ../
   -rwxr-xr-x   1 root     root        5290  4月 13日 2016年 CA.sh*
   -rwxr-xr-x   1 root     root        5175  4月 13日 2016年 CA.sh.orig*
   -rw-r--r--   1 root     root        3748  4月  8日  11:49 ca.cnf
   -rw-r--r--   1 root     root        4913  4月  8日  11:53 cacert.pem
   -rw-r--r--   1 root     root        1009  4月  8日  11:52 careq.pem
   drwxr-xr-x   2 root     root           2  4月  8日  11:52 certs/
   drwxr-xr-x   2 root     root           2  4月  8日  11:52 crl/
   -rw-r--r--   1 root     root         120  4月  8日  11:53 index.txt
   -rw-r--r--   1 root     root          21  4月  8日  11:53 index.txt.attr
   -rw-r--r--   1 root     root           0  4月  8日  11:52 index.txt.old
   drwxr-xr-x   2 root     root           3  4月  8日  11:53 newcerts/
   drwxr-xr-x   2 root     root           3  4月  8日  11:52 private/
   -rw-r--r--   1 root     root          41  4月  8日  11:53 serial
   root@kamimaedu[121]/usr/local/etc/pki/myCA#

4. サーバ用 SSL 証明書の作成

   1. /usr/local/etc/pki/myCA/ca.cnf

      [ usr_cert ]
      # Make CA
      # basicConstraints=CA:true
      # nsCertType = sslCA, emailCA
      # keyUsage = cRLSign, keyCertSign
      
      # Make Server Cert
      basicConstraints=CA:FALSE
      nsCertType = server
      
      # Make Client Cert
      # basicConstraints=CA:FALSE
      # nsCertType = client, email, objsign
   
   2. 秘密鍵の生育

      # mkdir -p /usr/local/etc/pki/Server/private
      # cd /usr/local/etc/pki/Server/private

      # openssl genrsa -out server.key -des3 2048
      Generating RSA private key, 2048 bit long modulus
      ....................+++
      ....+++
      e is 65537 (0x10001)
      Enter pass phrase for server.key:                   ※ サーバ秘密鍵のパスフレーズを入力
      Verifying - Enter pass phrase for server.key:       ※ 再入力

      # chmod 400 server.key

   3. 秘密鍵のパスワード解除

      このままだと httpd 起動時にパスワードを訊かれるため、パスワードをはずす。
 
      ※ 生育時に "-des3 2048" のオプションをつけないて実行しても、パスワード無しの秘密鍵を発行することができる。

      # mv server.key server.key.orig
      # openssl rsa -in server.key.orig -out server.key
      Enter pass phrase for server.key.orig:              ※ サーバ秘密鍵のパスフレーズを入力
      writing RSA key
   
   4. CSR (Certificate Signing Request : 証明書署名要求) の作成

      # mkdir /usr/local/etc/pki/Server/certs
      # cd /usr/local/etc/pki/Server/certs

      # openssl req -new -subj "/C=JP/ST=Gifu/L=Ogaki/O=TAK/OU=Network/CN=kamimaedu.ddo.jp" -key /usr/local/etc/pki/Server/private/server.key -out server.csr -config /usr/local/etc/pki/myCA/ca.cnf

5. 証明書の発行 (プライベート CA での署名)

   # cd /usr/local/etc/pki/Server/certs
   # openssl ca -config /usr/local/etc/pki/myCA/ca.cnf -in server.csr -out server.crt
   Using configuration from /usr/local/etc/pki/myCA/ca.cnf
   Enter pass phrase for /usr/local/etc/pki/myCA/private/cakey.pem:
   Check that the request matches the signature
   Signature ok
   Certificate Details:
           Serial Number:
               02:d4:67:47:e5:14:72:c5:ae:6f:ee:46:60:63:cb:86:bb:b4:fb:f5
           Validity
               Not Before: Apr  8 03:00:21 2020 GMT
               Not After : Apr  6 03:00:21 2030 GMT
           Subject:
               countryName               = JP
               stateOrProvinceName       = Gifu
               organizationName          = TAK
               organizationalUnitName    = Network
               commonName                = kamimaedu.ddo.jp
           X509v3 extensions:
               X509v3 Basic Constraints:
                   CA:FALSE
               Netscape Cert Type:
                   SSL Server
               X509v3 Subject Key Identifier:
                   18:90:E1:E1:2C:4B:A8:61:DB:E5:0B:12:32:FD:B2:96:D6:56:0D:0C
               X509v3 Authority Key Identifier:
                   keyid:38:8E:A6:19:7C:3B:86:08:BA:0F:75:D0:E4:8D:D8:20:96:6B:8B:73
   
   Certificate is to be certified until Apr  6 03:00:21 2030 GMT (3650 days)
   Sign the certificate? [y/n]:y
   
   1 out of 1 certificate requests certified, commit? [y/n]y
   Write out database with 1 new entries
   Data Base Updated

   結果、プライベート CA に署名された俺々証明書 server.crt が作成される。

   作成された証明書の内容を確認 (Signature Algorithm: が、sha256WithRSAEncryption であることを確認) する
   # openssl x509 -text -in server.crt

6. PEM (Privacy Enhanced Mail 形式の証明書) の作成

   # mkdir /usr/local/etc/pki/Server/pem
   # cd /usr/local/etc/pki/Server/pem
   # cat /usr/local/etc/pki/Server/certs/server.crt /usr/local/etc/pki/Server/private/server.key > server.pem

7. クライアント用 SSL 証明書の作成

   1. /usr/local/etc/pki/myCA/ca.cnf の編集

      [ usr_cert ]
      # Make CA
      # basicConstraints=CA:true
      # nsCertType = sslCA, emailCA
      # keyUsage = cRLSign, keyCertSign
      
      # Make Server Cert
      # basicConstraints=CA:FALSE
      # nsCertType = server
      
      # Make Client Cert
      basicConstraints=CA:FALSE
      nsCertType = client, email, objsign
   
   2. 秘密鍵の生育

      # mkdir -p /usr/local/etc/pki/Client/private
      # cd /usr/local/etc/pki/Client/private
      # openssl genrsa -out client.key 2048

   3. CSR (Certificate Signing Request : 証明書署名要求) の作成

      # mkdir /usr/local/etc/pki/Client/certs
      # cd /usr/local/etc/pki/Client/certs

      # openssl req -new -subj "/C=JP/ST=Gifu/L=Ogaki/O=TAK/OU=Network/CN=CL1" -key  /usr/local/etc/pki/Client/private/client.key -out client.csr

   4. 証明書の発行 (プライベート CA での署名)

      # cd /usr/local/etc/pki/Client/certs
      # openssl ca -config /usr/local/etc/pki/myCA/ca.cnf -in client.csr -out client.crt
      Using configuration from /usr/local/etc/pki/myCA/ca.cnf
      Enter pass phrase for /usr/local/etc/pki/myCA/private/cakey.pem:
      Check that the request matches the signature
      Signature ok
      Certificate Details:
              Serial Number:
                  02:d4:67:47:e5:14:72:c5:ae:6f:ee:46:60:63:cb:86:bb:b4:fb:f7
              Validity
                  Not Before: Apr  8 03:46:01 2020 GMT
                  Not After : Apr  6 03:46:01 2030 GMT
              Subject:
                  countryName               = JP
                  stateOrProvinceName       = Gifu
                  organizationName          = TAK
                  organizationalUnitName    = Network
                  commonName                = CL1
              X509v3 extensions:
                  X509v3 Basic Constraints:
                      CA:FALSE
                  Netscape Cert Type:
                      SSL Client, S/MIME, Object Signing
                  X509v3 Subject Key Identifier:
                      14:32:33:6D:03:80:92:E2:3C:30:17:D8:04:FC:0E:27:46:15:14:64
                  X509v3 Authority Key Identifier:
                      keyid:38:8E:A6:19:7C:3B:86:08:BA:0F:75:D0:E4:8D:D8:20:96:6B:8B:73
      
      Certificate is to be certified until Apr  6 03:46:01 2030 GMT (3650 days)
      Sign the certificate? [y/n]:y
      
      1 out of 1 certificate requests certified, commit? [y/n]y
      Write out database with 1 new entries
      Data Base Updated

   5. Windows クライアント配布形式 (PKCS#12 : Public-Key Cryptography Standards) へ変換

      # cd /usr/local/etc/pki/Client/certs

      # openssl pkcs12 -export -in /usr/local/etc/pki/Client/certs/client.crt -inkey /usr/local/etc/pki/Client/private/client.key -out client.p12
      Enter Export Password:                                       # インポート用パスフレーズ
      Verifying - Enter Export Password:                           # インポート用パスフレーズ
      
   6. Windows クライアント配布用のプライベート CA 証明書の作成

      # cd /usr/local/etc/pki/Client/certs
      # openssl x509 -inform pem -in /usr/local/etc/pki/myCA/cacert.pem -outform der -out cacert.der
      
   7. Windows クライアントに以下を配布します

      cacert.der
      client.p12

8. ルート認証局の証明書ファイルの取得

   # cd /usr/local/etc/pki/myCA
   # wget -O ca-bundle.crt http://curl.haxx.se/ca/cacert.pem


